import { getConstants } from './constants.js';

let countdownInterval = null;
let progressInterval = null;

document.addEventListener("DOMContentLoaded", async () => {
  const { BACKEND_URL } = getConstants();
  const softwareSelect = document.getElementById("softwareName");
  const note = document.getElementById("otpNote");

  // T·∫£i danh s√°ch ph·∫ßn m·ªÅm
  const response = await fetch(BACKEND_URL, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ action: "getSoftwareListUnique" })
  });

  const result = await response.json();
  if (result.status === "success" && Array.isArray(result.list)) {
    result.list.forEach(name => {
      const option = document.createElement("option");
      option.value = name;
      option.textContent = name;
      softwareSelect.appendChild(option);
    });
  }

  // Ghi ch√∫ h∆∞·ªõng d·∫´n
  if (note) {
    note.innerHTML = `üí° <strong>H∆∞·ªõng d·∫´n:</strong> N·∫øu ph·∫ßn m·ªÅm y√™u c·∫ßu nh·∫≠p m√£ t·ª´ ·ª©ng d·ª•ng x√°c minh, ch·ªçn "<strong>·ª®ng d·ª•ng Authy</strong>".<br />
    N·∫øu ph·∫ßn m·ªÅm g·ª≠i m√£ v·ªÅ email ƒëƒÉng nh·∫≠p, ch·ªçn "<strong>Email</strong>".`;
  }

  // Lu√¥n hi·ªÉn th·ªã ƒë·ªìng h·ªì ƒë·∫øm ng∆∞·ª£c
  startOtpCountdownDisplay();
});

document.getElementById("btnGetOtp").addEventListener("click", () => {
  const now = Date.now();
  const msUntilNextOtp = 30000 - (now % 30000);

  if (msUntilNextOtp < 10000) {
    const waitMs = msUntilNextOtp + 30000;
    let seconds = Math.ceil(waitMs / 1000);
    updateOtpResult(`‚è≥ Vui l√≤ng ƒë·ª£i ${seconds}s ƒë·ªÉ l·∫•y m√£ OTP m·ªõi...`);
    let countdown = setInterval(() => {
      seconds--;
      updateOtpResult(`‚è≥ Vui l√≤ng ƒë·ª£i ${seconds}s ƒë·ªÉ l·∫•y m√£ OTP m·ªõi...`);
      if (seconds <= 0) {
        clearInterval(countdown);
        requestOtp();
      }
    }, 1000);
  } else {
    requestOtp();
  }
});

function updateOtpResult(message) {
  const output = document.getElementById("otpResult");
  output.innerHTML = `<div style="color:#555; font-size:0.95em;">${message}</div>`;
}

async function requestOtp() {
  const emailDangKy = document.getElementById("emailDangKy").value.trim();
  const software = document.getElementById("softwareName").value;
  const otpSource = document.getElementById("otpSource").value;
  const output = document.getElementById("otpResult");

  if (!emailDangKy || !software || !otpSource) {
    alert("Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin!");
    return;
  }

  const { BACKEND_URL } = getConstants();

  const response = await fetch(BACKEND_URL, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({
      action: "getOtpByRequest",
      email: emailDangKy,
      software,
      otpSource
    })
  });

  const result = await response.json();

  if (result.status === "success") {
    output.innerHTML = `
      <strong>M√£ OTP:</strong>
      <code id="otpCode" style="cursor:pointer; color:#1a73e8; font-weight:bold;">${result.otp}</code>
      <div style="font-size:0.85em; color:#888; margin-top:4px;">(Click v√†o m√£ OTP ƒë·ªÉ sao ch√©p)</div>
      <div id="otpProgressContainer" style="margin-top:10px;">
        <svg height="36" width="36">
          <circle cx="18" cy="18" r="16" stroke="#ccc" stroke-width="3" fill="none"></circle>
          <circle id="otpProgressCircle" cx="18" cy="18" r="16" stroke="#1a73e8" stroke-width="3" fill="none"
            stroke-dasharray="100" stroke-dashoffset="0" transform="rotate(-90 18 18)" />
        </svg>
      </div>
    `;

    document.getElementById("otpCode").addEventListener("click", () => {
      navigator.clipboard.writeText(result.otp);
      alert("‚úÖ M√£ OTP ƒë√£ ƒë∆∞·ª£c sao ch√©p!");
    });

    if (result.message) {
      output.innerHTML += `<div style="margin-top:10px; font-size:0.9em; color:#444;">${result.message}</div>`;
    }

    animateOtpCircle();
  } else {
    output.textContent = "‚ùå " + (result.message || "Kh√¥ng th·ªÉ l·∫•y OTP.");
  }
}

function animateOtpCircle() {
  const circle = document.getElementById("otpProgressCircle");
  let progress = 0;
  if (circle) {
    clearInterval(progressInterval);
    progress = 0;
    const step = 100 / 30;
    progressInterval = setInterval(() => {
      progress += step;
      circle.setAttribute("stroke-dashoffset", 100 - progress);
      if (progress >= 100) {
        clearInterval(progressInterval);
      }
    }, 1000);
  }
}

function startOtpCountdownDisplay() {
  const otpNote = document.getElementById("otpNoteTimer");
  if (!otpNote) return;

  setInterval(() => {
    const now = Date.now();
    const msUntilNextOtp = 30000 - (now % 30000);
    const seconds = Math.floor(msUntilNextOtp / 1000);
    otpNote.innerHTML = `üïí M√£ OTP m·ªõi s·∫Ω ƒë∆∞·ª£c sinh ra sau <strong>${seconds}s</strong>`;
  }, 1000);
}
